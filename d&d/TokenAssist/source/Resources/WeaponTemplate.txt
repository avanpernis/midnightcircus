<!-- generic variables that were populated by TokenAssist -->
[H : PowerName = "__POWER_NAME__"]
[H : WeaponList = "__WEAPON_LIST__"]
[H : AttackBonusList = "__ATTACK_BONUS_LIST__"]
[H : DamageList = "__DAMAGE_LIST__"]
[H : MaxDamageList = "__MAX_DAMAGE_LIST__"]
[H : CriticalDamageList = "__CRITICAL_DAMAGE_LIST__"]
[H : AttackStatList = "__ATTACK_STAT_LIST__"]
[H : DefenseList = "__DEFENSE_LIST__"]
[H : MultipleTargets = __MULTIPLE_TARGETS__]

<!-- html power card, as found in the compendium -->
[H : PowerCard = "__POWER_CARD__"]

<!-- retrieve previously stored values -->
[H : WeaponChoice = getStrProp(CombatStatus, "LastWeaponChoice")]
[H : NumberOfTargets = if(MultipleTargets == 1, getStrProp(CombatStatus, "LastNumberOfTargets"), 1)]
[H : CombatAdvantage = getStrProp(CombatStatus, "LastCombatAdvantage")]
[H : TargetCover = getStrProp(CombatStatus, "LastTargetCover")]
[H : TargetConcealment = getStrProp(CombatStatus, "LastTargetConcealment")]
[H : TempAttackBonus = getStrProp(CombatStatus, "LastTempAttackBonus")]
[H : TempDamageBonus = getStrProp(CombatStatus, "LastTempDamageBonus")]

<!-- build a list of weapons and their respective attack bonuses to faciliate selection by the user -->
[H : WeaponAndBonusList = ""]
[H, C(listCount(WeaponList)), CODE :
{
   [H : AttackBonus = listGet(AttackBonusList, roll.count)]
   [H : AttackBonusPrefix = if(eval("" + AttackBonus) < 0, "", "+")]
   [H : WeaponAndBonusList = WeaponAndBonusList + listGet(WeaponList, roll.count) + " (" + AttackBonusPrefix + AttackBonus +"), "]
}]

<!-- prompt for target information, tactical state, temporary bonuses, etc... -->
[H : InputPrompt = input(
   PowerName + " | <html>" + PowerCard + "</html> | | LABEL | SPAN = TRUE",
   "UNUSED | <html></html> | | LABEL | SPAN = TRUE",
   "WeaponChoice | " + WeaponAndBonusList + " | Weapon Choice | RADIO | SELECT = " + WeaponChoice,
   if(MultipleTargets == 1, "NumberOfTargets | " + NumberOfTargets + " | Number Of Targets | TEXT", ""),
   "CombatAdvantage | " + CombatAdvantage + " | Combat Advantage | CHECK",
   "TargetCover | None, Partial, Superior | Target Cover | RADIO | SELECT = " + TargetCover,
   "TargetConcealment | None, Partial, Total | Target Concealment | RADIO | SELECT = " + TargetConcealment,
   "TempAttackBonus | " + TempAttackBonus + " | Temporary Attack Bonus | TEXT",
   "TempDamageBonus | " + TempDamageBonus + " | Temporary Damage Bonus | TEXT")]

<!-- bail if the user cancels the dialog -->
[H : abort(InputPrompt)]

<!-- store the values for next time -->
[H : PropsUsedList = "WeaponChoice, NumberOfTargets, CombatAdvantage, TargetCover, TargetConcealment, TempAttackBonus, TempDamageBonus"]
[H, C(listCount(PropsUsedList)) : CombatStatus = setStrProp(CombatStatus, "Last" + listGet(PropsUsedList, roll.count), eval(listGet(PropsUsedList, roll.count)))]

<!-- get the values associated with the selected weapon -->
[H : Weapon = listGet(WeaponList, WeaponChoice)]
[H : AttackBonus = listGet(AttackBonusList, WeaponChoice)]
[H : Damage = listGet(DamageList, WeaponChoice)]
[H : MaxDamage = listGet(MaxDamageList, WeaponChoice)]
[H : CriticalDamage = listGet(CriticalDamageList, WeaponChoice)]
[H : AttackStat = listGet(AttackStatList, WeaponChoice)]
[H : Defense = listGet(DefenseList, WeaponChoice)]

<!-- attack rolls -->
[H : AttackRolls = ""]
[H, C(NumberOfTargets) : AttackRolls = AttackRolls + 1d20 + ", "]

<!-- critical detection -->
[H : CriticalRange = 20]
[H : CriticalHit = 0]
[H, C(NumberOfTargets) : CriticalHit = if(eval("" + listGet(AttackRolls, roll.count)) >= CriticalRange, 1, CriticalHit)]
[H : AllCriticalHits = 1]
[H, C(NumberOfTargets) : AllCriticalHits = if(eval("" + listGet(AttackRolls, roll.count)) < CriticalRange, 0, AllCriticalHits)]

<!-- apply combat advantage, cover, concealment, and temporary attack bonus -->
[H : AttackBonus = AttackBonus
   + if(CombatAdvantage, 2, 0)
   - if(TargetCover == 0, 0, if(TargetCover == 1, 2, 5))
   - if(TargetConcealment == 0, 0, if(TargetConcealment == 1, 2, 5))
   + TempAttackBonus]

[H : AttackResults = ""]
[H, C(NumberOfTargets) : AttackResults = AttackResults + (eval("" + listGet(AttackRolls, roll.count)) + AttackBonus) + ", "]

<!-- build a pretty output string to indicate which attacks were criticals and which were not -->
[H : AttackResultOutput = ""]
[H, C(NumberOfTargets), CODE :
{
   [H : AttackResult = listGet(AttackResults, roll.count)]

   <!-- red text if critical, black otherwise -->
   [H : AttackResultColor = if(eval("" + listGet(AttackRolls, roll.count)) >= CriticalRange, "red", "black")]

   [H : AttackResultOutput = AttackResultOutput + "<span style='color:" + AttackResultColor + "'>" + AttackResult + "</span>" + if(roll.count < NumberOfTargets - 1, ", ", "")]
}]

<!-- damage roll (include temporary damage bonus) -->
[H : DamageRoll = eval(Damage + "+" + TempDamageBonus)]
[H : MaxDamage = eval("" + MaxDamage + "+" + CriticalDamage + "+" + TempDamageBonus)]

<!-- build a pretty output string to indicate which damage was critical and which was not -->
[H : DamageOutput = "<span style='color:black'>" + DamageRoll + "</span>"]
[H : MaxDamageOutput = "<span style='color:red'>" + MaxDamage + "</span>"]
[H : DamageResultOutput = if(AllCriticalHits == 1, MaxDamageOutput, if(CriticalHit == 1, DamageOutput + ", " + MaxDamageOutput, DamageOutput))]

<!-- build a pretty output string to indicate what types of cover and concealment the target may have -->
[H : CoverConcealmentOutput = if(TargetCover != 0 || TargetConcealment != 0, "The enemy has ", "")
   + if(TargetCover == 0, "", if(TargetCover == 1, "<b>Cover</b>", "<b>Superior Cover</b>"))
   + if(TargetCover > 0 && TargetConcealment > 0, " and ", "")
   + if(TargetConcealment == 0, "", if(TargetConcealment == 1, "<b>Concealment</b>", "<b>Total Concealment</b>"))
   + if(TargetCover != 0 || TargetConcealment != 0, ".<br>", "")]

<!-- show the power card to the other players -->
{PowerCard}

<!-- show the attack results -->
{PowerName} <b>{if(AttackBonus < 0, "", "+")}{AttackBonus} {AttackStat} vs {Defense}</b><br>
You use your <b>{Weapon}</b> to attack (<b>{AttackResultOutput}</b>){if(CombatAdvantage == 1, " while having <b>Combat Advantage</b>", "")}.<br>
{CoverConcealmentOutput}
You do <b>{DamageResultOutput}</b> points of damage!